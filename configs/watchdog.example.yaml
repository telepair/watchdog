# Watchdog Configuration Example
# Copy this file to watchdog.yaml and customize for your environment

# Server Configuration
server:
  listen: ":8080"                    # Change to ":443" for HTTPS
  read_timeout: "30s"
  timeout: "30s"

  # Enable TLS for production
  tls:
    enabled: false                   # Set to true for HTTPS
    cert_file: "/path/to/cert.pem"
    key_file: "/path/to/key.pem"

  # CORS Configuration
  cors:
    enabled: true
    origins:
      - "https://your-domain.com"   # Restrict origins in production

# Storage Configuration
storage:
  data_dir: "/var/lib/watchdog"     # Use absolute path in production

  sqlite:
    path: "watchdog.db"
    max_retries: 5
    busy_timeout: "5s"

  # Use VictoriaMetrics for production metrics storage
  metrics:
    type: "victoriametrics"         # Change from "memory" for production
    retention_days: 90              # Increase retention for production

    victoria:
      url: "http://localhost:8428"
      username: ""
      password: ""
      timeout: "30s"

  # Use Redis for production caching
  cache:
    type: "redis"                   # Change from "memory" for production
    max_size: 1073741824           # 1GB
    ttl: "1h"

    redis:
      addr: "localhost:6379"
      password: "your-redis-password"
      db: 0

# Monitoring Configuration
monitoring:
  default_interval: "1m"            # More frequent checks
  max_concurrency: 100              # Increase for production
  timeout: "10s"
  user_agent: "Watchdog/1.0 (Production)"

# Alerting Configuration
alerting:
  evaluation_interval: "30s"
  group_wait: "10s"
  group_interval: "5m"
  repeat_interval: "2h"             # More frequent notifications

# Security Configuration
security:
  # Enable authentication for production
  auth:
    enabled: true                   # Enable for production
    type: "jwt"                     # Use JWT for better security
    token_ttl: "8h"                # Shorter TTL for security

    basic:
      username: "admin"
      password: "change-this-password"  # Use strong password

    jwt:
      secret: "your-jwt-secret-key-here"  # Use strong secret
      issuer: "watchdog-prod"
      audience: ["watchdog-ui", "watchdog-api"]

  rate_limit:
    enabled: true
    rate: 50.0                      # Lower rate for production
    burst: 100

  session_secret: "your-session-secret-here"  # Use strong secret

# Logging Configuration
logging:
  level: "info"                     # Use "warn" or "error" for production
  format: "json"                    # JSON for log aggregation
  output: "file"                    # Log to file in production
  file: "/var/log/watchdog/watchdog.log"

# Production Notification Channels
notifications:
  email:
    enabled: true
    smtp_host: "smtp.gmail.com"
    smtp_port: 587
    username: "alerts@your-company.com"
    password: "your-app-password"
    from: "Watchdog <alerts@your-company.com>"

  telegram:
    enabled: true
    bot_token: "1234567890:ABCdefGHIjklMNOpqrsTUVwxyz"
    chat_id: "-1001234567890"

  slack:
    enabled: true
    webhook_url: "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"

  webhook:
    enabled: true
    url: "https://your-webhook-endpoint.com/alerts"
    headers:
      Authorization: "Bearer your-webhook-token"
      Content-Type: "application/json"

# Example Monitor Configurations
monitors:
  - name: "Main Website"
    type: "http"
    enabled: true
    interval: "1m"
    config:
      url: "https://your-website.com"
      method: "GET"
      timeout: "10s"
      expected_status: 200
      follow_redirects: true
      headers:
        User-Agent: "Watchdog Health Check"
    alerts:
      - condition: "status != 'up'"
        severity: "critical"
        message: "Website is down"

  - name: "API Endpoint"
    type: "http"
    enabled: true
    interval: "30s"
    config:
      url: "https://api.your-service.com/health"
      method: "GET"
      timeout: "5s"
      expected_status: 200
      expected_body: "OK"
    alerts:
      - condition: "response_time > 2000"
        severity: "warning"
        message: "API response time is high"
      - condition: "status != 'up'"
        severity: "critical"
        message: "API is down"

  - name: "Database Connection"
    type: "tcp"
    enabled: true
    interval: "2m"
    config:
      host: "db.your-service.com"
      port: 5432
      timeout: "5s"
    alerts:
      - condition: "status != 'up'"
        severity: "critical"
        message: "Database connection failed"

  - name: "Server Ping"
    type: "ping"
    enabled: true
    interval: "1m"
    config:
      host: "your-server.com"
      count: 3
      timeout: "5s"
    alerts:
      - condition: "packet_loss > 10"
        severity: "warning"
        message: "High packet loss detected"
      - condition: "status != 'up'"
        severity: "critical"
        message: "Server unreachable"